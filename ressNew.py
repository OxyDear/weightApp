# -*- coding: utf-8 -*-
import json

# Form implementation generated from reading ui file 'ressNew.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QAction, QMainWindow
from push import Ui_WindowPush
from data import get_part_of_day
from dataPush import push_to_data

items = [[], [], []]

try:
    with open('data.json', 'r') as file:
        src = json.loads(file.read())
    items = [src['morning'], src['afternoon'], src['evening']]

except FileNotFoundError:
    pass


class Ui_MainResults(QMainWindow):
    def open_sec_window(self):
        # print(1)
        self.sec_window = QMainWindow()
        self.sec_ui = Ui_WindowPush()
        self.sec_ui.setupUi(self.sec_window)
        self.sec_window.show()
        self.adder(self.sec_ui)
        # print(self.sec_ui.res)

    def delete_result(self):

        try:
            if len(self.listWidget_af.selectedItems()) == 0 and len(self.listWidget_ev.selectedItems()) == 0:
                self.listWidget_mr.takeItem(self.listWidget_mr.row(self.listWidget_mr.selectedItems()[0]))
            elif len(self.listWidget_mr.selectedItems()) == 0 and len(self.listWidget_ev.selectedItems()) == 0:
                self.listWidget_af.takeItem(self.listWidget_af.row(self.listWidget_af.selectedItems()[0]))
            elif len(self.listWidget_mr.selectedItems()) == 0 and len(self.listWidget_af.selectedItems()) == 0:
                self.listWidget_ev.takeItem(self.listWidget_ev.row(self.listWidget_ev.selectedItems()[0]))
        except IndexError:
            pass

    def set_mr(self):
        self.default = 'morning'

    def set_af(self):
        self.default = 'afternoon'

    def set_ev(self):
        self.default = 'evening'

    def setupUi(self, MainResults):
        self.default = None
        MainResults.setObjectName("MainResults")
        MainResults.resize(350, 355)
        MainResults.setStyleSheet("background-color: rgb(222, 222, 222);")
        self.centralwidget = QtWidgets.QWidget(MainResults)
        self.centralwidget.setObjectName("centralwidget")
        self.afternoon = QtWidgets.QLabel(self.centralwidget)
        self.afternoon.setGeometry(QtCore.QRect(130, 10, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.afternoon.setFont(font)
        # self.afternoon.setStyleSheet("color: rgb(255, 255, 255)")
        self.afternoon.setObjectName("afternoon")
        self.evening = QtWidgets.QLabel(self.centralwidget)
        self.evening.setGeometry(QtCore.QRect(250, 10, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.evening.setFont(font)
        # self.evening.setStyleSheet("color: rgb(255, 255, 255)")
        self.evening.setObjectName("evening")
        self.morning = QtWidgets.QLabel(self.centralwidget)
        self.morning.setGeometry(QtCore.QRect(30, 10, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.morning.setFont(font)
        # self.morning.setStyleSheet("color: rgb(255, 255, 255)")
        self.morning.setObjectName("morning")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(116, 0, 3, 320))
        self.line.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(226, 0, 3, 320))
        self.line_2.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.listWidget_mr = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_mr.setGeometry(QtCore.QRect(15, 40, 131, 241))
        self.listWidget_mr.setMinimumSize(QtCore.QSize(0, 0))
        self.listWidget_mr.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.listWidget_mr.setStyleSheet("border-radius: 30;\n"
                                         "background-color: rgb(255, 255, 255);\n"
                                         "border: 1px solid rgb(0, 0, 0);")
        self.listWidget_mr.setAutoScroll(True)
        self.listWidget_mr.setAutoScrollMargin(4)
        self.listWidget_mr.setFlow(QtWidgets.QListView.TopToBottom)
        self.listWidget_mr.setResizeMode(QtWidgets.QListView.Fixed)
        self.listWidget_mr.setLayoutMode(QtWidgets.QListView.SinglePass)
        self.listWidget_mr.setModelColumn(0)
        self.listWidget_mr.setObjectName("listWidget")
        self.listWidget_mr.verticalScrollBar().hide()
        self.listWidget_af = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_af.setGeometry(QtCore.QRect(117, 40, 111, 241))
        self.listWidget_af.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                         "border: 1px solid rgb(0, 0, 0);")
        self.listWidget_af.setAutoScrollMargin(2)
        self.listWidget_af.setObjectName("listWidget_2")
        self.listWidget_af.verticalScrollBar().hide()
        self.listWidget_ev = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_ev.setGeometry(QtCore.QRect(198, 40, 141, 241))
        self.listWidget_ev.setStyleSheet("border-radius: 30;\n"
                                         "background-color: rgb(255, 255, 255);\n"
                                         "border: 1px solid rgb(0, 0, 0);")
        self.listWidget_ev.setObjectName("listWidget_3")
        self.listWidget_ev.verticalScrollBar().hide()
        self.afternoon.raise_()
        self.evening.raise_()
        self.morning.raise_()
        self.line.raise_()
        self.line_2.raise_()
        self.listWidget_mr.raise_()
        self.listWidget_ev.raise_()
        self.listWidget_af.raise_()
        MainResults.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainResults)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 350, 21))
        self.menubar.setObjectName("menubar")

        self.imp = self.menubar.addMenu('Actions')
        self.admin = self.menubar.addMenu('Set part of day')
        self.actImp = QAction('Import', self)
        self.imp.addAction(self.actImp)

        self.deleteImp = QAction('Delete', self)
        self.imp.addAction(self.deleteImp)

        self.mr = QAction('Morning')
        self.af = QAction('Afternoon')
        self.ev = QAction('Evening')
        self.admin.addAction(self.mr)
        self.admin.addAction(self.af)
        self.admin.addAction(self.ev)

        self.menuImport = QtWidgets.QMenu(self.menubar)
        self.menuImport.setObjectName("menuImport")
        self.menuDelete = QtWidgets.QMenu(self.menubar)
        self.menuDelete.setObjectName("menuDelete")
        MainResults.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainResults)
        self.statusbar.setObjectName("statusbar")
        MainResults.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuImport.menuAction())
        self.menubar.addAction(self.menuDelete.menuAction())

        try:
            for val in src['morning']:
                ress = QtWidgets.QListWidgetItem(val)
                ress.setTextAlignment(QtCore.Qt.AlignVCenter | QtCore.Qt.AlignHCenter)
                ress.setFont(font)
                self.listWidget_mr.addItem(ress)

            for val in src['afternoon']:
                ress = QtWidgets.QListWidgetItem(val)
                ress.setTextAlignment(QtCore.Qt.AlignVCenter | QtCore.Qt.AlignHCenter)
                ress.setFont(font)
                self.listWidget_af.addItem(ress)

            for val in src['evening']:
                ress = QtWidgets.QListWidgetItem(val)
                ress.setTextAlignment(QtCore.Qt.AlignVCenter | QtCore.Qt.AlignHCenter)
                ress.setFont(font)
                self.listWidget_ev.addItem(ress)
        except NameError:
            pass

        self.retranslateUi(MainResults)
        QtCore.QMetaObject.connectSlotsByName(MainResults)

        self.actImp.triggered.connect(lambda: self.open_sec_window())
        self.deleteImp.triggered.connect(lambda: self.delete_result())
        self.mr.triggered.connect(lambda: self.set_mr())
        self.af.triggered.connect(lambda: self.set_af())
        self.ev.triggered.connect(lambda: self.set_ev())
        # app.aboutToQuit.connect(lambda: self.closeEvent)

    def retranslateUi(self, MainResults):
        _translate = QtCore.QCoreApplication.translate
        MainResults.setWindowTitle(_translate("MainResults", "WeightApp"))
        self.afternoon.setText(_translate("MainResults", "Afternoon"))
        self.evening.setText(_translate("MainResults", "Evening"))
        self.morning.setText(_translate("MainResults", "Morning"))
        # self.menuImport.setTitle(_translate("MainResults", "Import"))
        # self.menuDelete.setTitle(_translate("MainResults", "Delete"))

    def adder(self, WindowPush):
        self.sec_ui.pushButton.clicked.connect(lambda: self.push(WindowPush))

    def push(self, window):
        self.res = self.sec_ui.lineEdit.text()

        res = QtWidgets.QListWidgetItem(self.res)
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        res.setTextAlignment(QtCore.Qt.AlignVCenter | QtCore.Qt.AlignHCenter)
        res.setFont(font)

        if self.default is None:
            if get_part_of_day() == 'morning':
                self.listWidget_mr.addItem(res)
                items[0].append(self.res)
            elif get_part_of_day() == 'afternoon':
                self.listWidget_af.addItem(res)
                items[1].append(self.res)
            elif get_part_of_day() == 'evening':
                self.listWidget_ev.addItem(res)
                items[2].append(self.res)
        else:
            if self.default == 'morning':
                self.listWidget_mr.addItem(res)
                items[0].append(self.res)
            elif self.default == 'afternoon':
                self.listWidget_af.addItem(res)
                items[1].append(self.res)
            elif self.default == 'evening':
                self.listWidget_ev.addItem(res)
                items[2].append(self.res)

            self.default = None


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainResults = QtWidgets.QMainWindow()
    ui = Ui_MainResults()
    ui.setupUi(MainResults)
    MainResults.show()
    if app.exec_() == 0:
        push_to_data(items)
        sys.exit()
    # sys.exit(app.exec_())
